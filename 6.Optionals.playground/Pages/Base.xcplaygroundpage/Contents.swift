// пустой контейнер типа Int (по-умолчанию присваивается значение nil)
var intOptional:Int? // знак ? означает "упаковку" в контейнер (в данном случае Int)


// можно объявлять так (но это избыточно):
// var intOptional:Optional<Int>

// при попытке использовать Optional переменную - компилятор укажет не ошибку
//intOptional += 1

// контейнер типа Int со значением 10
var intOptionalWithValue: Int? = 10

// печатает контейнер, а не само значение
print(intOptionalWithValue)

// для работы со значением - нужно его извлечь из контейнера

// force unwrapping - явное, принудительное извлечение значения (в данном случае тип Int со значением 10)
print(intOptionalWithValue!)

// ошибки
//print(intOptional!) // извлечение значения из пустого контейнера

//print(intOptional+5) // нельзя использовать Optional напрямую, надо всегда сначала извлекать значение

//intOptional = 11 // 11 автоматически попадает в контейнер
//print(intOptional!+5) // пустое значение при извлечении (не проверяем на nil перед использованием) - такую запись можно использовать, если ранее присвоили значение




// implicit unwrapping (неявное извлечение) - если точно известно, что есть значение, можно извлекать автоматически
var str: String! // везде, где будет использоваться эта переменная - будет автоматическое извлечение
//str.count // ошибка - попытались автоматически извлечь значение, а там nil

str = "test value"

str = str + " new" // автоматическое извлечение и добавление текста





//var i: Int = nil // нельзя присваивать nil, т.к. тип не Optional

//var i = 0
//i = nil










