
// String - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç–∏–ø, –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤
// Character - –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª

// –≤ Java String —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–æ—á–Ω—ã–º —Ç–∏–ø–æ–º, –≤ Swift - value type

let s1 = "first word"
let i1 = 100
let s2 = "my text is \"\(s1)\" and number = \(i1)" // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞, –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π

let c1 = "a" // –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ç–∏–ø String
type(of: c1)

let c2: Character = "a"
type(of: c2)

//let c3: Character = "ab"// –Ω–µ–ª—å–∑—è

let s3 = String(1+3)// –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (—Å–Ω–∞—á–∞–ª –ø–æ—Å—á–∏—Ç–∞–µ—Ç 1+3, –∑–∞—Ç–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ String)

//let s4 = 'test' // –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å



// —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
var newStr = "test str"
var newStr2 = "test str"

// –∏—Å–ø–æ–ª—å–∑—É–µ–º == –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è String –∑–Ω–∞—á–µ–Ω–∏–π (—Ç.–∫. value type), = –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è (–≤ Java –¥–ª—è String –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å equals, —Ç.–∫. —Ç–∞–º —ç—Ç–æ –æ–±—ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø)

newStr == newStr2 // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
newStr = newStr2 // –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ


var st1 = "üë®‚Äçüë©‚Äçüë¶‚Äçüë¶" // emoji –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∏–∑ –º–µ–Ω—é Edit
var st2 = st1
st2 = "3" // –∑–Ω–∞—á–µ–Ω–∏–µ st1 –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è, —Ç.–∫. value type
st1

// –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—á–µ—Ä–µ–∑ —Ç—Ä–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏)
let strLines = """
In addition to familiar types, Swift introduces advanced types not found in Objective-C, such as tuples.
Tuples enable you to create and pass around groupings of values.
You can use a tuple to return multiple values from a function as a single compound value.
"""

// —Å–∏–º–≤–æ–ª —é–Ω–∏–∫–æ–¥
let unicodeSymbol = "\u{3030}"



